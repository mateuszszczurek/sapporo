{"version":3,"sources":["components/Logo.jsx","components/NewTourney.jsx","components/LoadTourney.jsx","components/SelectionPage.jsx","App.js","serviceWorker.js","index.js"],"names":["Logo","react","PageHeader","NewToruney","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","state","value","length","e","setState","target","Grid","Row","Col","sm","smOffset","style","formStyle","onSubmit","alert","preventDefault","FormGroup","controlId","validationState","getValidationState","ControlLabel","FormControl","type","placeholder","onChange","Feedback","Button","React","border","padding","LoadTurney","FieldGroup","id","label","_ref","help","objectWithoutProperties","HelpBlock","SelectionPage","ButtonGroup","justified","lib","to","bsStyle","App","react_default","a","createElement","BrowserRouter","Switch","Route","path","component","NewTourney","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSAGeA,EAAA,kBAAMC,EAAA,cAACC,EAAA,EAAD,mCCCfC,cAEF,SAAAA,EAAYC,EAAOC,GAAS,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACxBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAML,EAAOC,KAERQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAEpBA,EAAKU,MAAQ,CACTC,MAAO,IANaX,oFAYxB,OADeG,KAAKO,MAAMC,MAAMC,OACnB,EAAU,UAChB,0CAGEC,GACTV,KAAKW,SAAS,CAACH,MAAOE,EAAEE,OAAOJ,yCAI/B,OAAOhB,EAAA,cAACqB,EAAA,EAAD,KACHrB,EAAA,cAACsB,EAAA,EAAD,KACItB,EAAA,cAACuB,EAAA,EAAD,CAAKC,GAAI,EAAGC,SAAU,GAClBzB,EAAA,cAACD,EAAD,MACAC,EAAA,sBACI0B,MAAOC,EACPC,SAAU,SAAAV,GACNW,MAAM,YACNX,EAAEY,mBAEN9B,EAAA,kDACAA,EAAA,cAAC+B,EAAA,EAAD,CACIC,UAAU,gBACVC,gBAAiBzB,KAAK0B,sBAEtBlC,EAAA,cAACmC,EAAA,EAAD,kCACAnC,EAAA,cAACoC,EAAA,EAAD,CACIC,KAAK,OACLrB,MAAOR,KAAKO,MAAMC,MAClBsB,YAAY,oDACZC,SAAU/B,KAAKI,eAEnBZ,EAAA,cAACoC,EAAA,EAAYI,SAAb,OAEJxC,EAAA,cAACyC,EAAA,EAAD,CAAQJ,KAAK,UAAb,wBA/CCK,aAuDnBf,EAAY,CACdgB,OAAQ,mBACRC,QAAS,QAGE1C,qBCzDT2C,mLAGE,OAAO7C,EAAA,cAACqB,EAAA,EAAD,KACHrB,EAAA,cAACsB,EAAA,EAAD,KACItB,EAAA,cAACuB,EAAA,EAAD,CAAKC,GAAI,EAAGC,SAAU,GAClBzB,EAAA,cAACD,EAAD,MACAC,EAAA,sBAAM0B,MAAOC,GACT3B,EAAA,2DACAA,EAAA,cAAC+B,EAAA,EAAD,CAAWC,UAAU,iBACjBhC,EAAA,cAAC8C,EAAD,CACIC,GAAG,mBACHV,KAAK,OACLW,MAAM,mDAbbN,aAwBnBf,EAAY,CACdgB,OAAQ,mBACRC,QAAS,QAIb,SAASE,EAATG,GAAiD,IAA5BF,EAA4BE,EAA5BF,GAAIC,EAAwBC,EAAxBD,MAAOE,EAAiBD,EAAjBC,KAAS/C,EAAQG,OAAA6C,EAAA,EAAA7C,CAAA2C,EAAA,uBAC7C,OACIjD,EAAA,cAAC+B,EAAA,EAAD,CAAWC,UAAWe,GAClB/C,EAAA,cAACmC,EAAA,EAAD,KAAea,GACfhD,EAAA,cAACoC,EAAA,EAAgBjC,GAChB+C,GAAQlD,EAAA,cAACoD,EAAA,EAAD,KAAYF,IAKlBL,yBCzCAQ,EAAA,kBACXrD,EAAA,cAACqB,EAAA,EAAD,KACIrB,EAAA,cAACsB,EAAA,EAAD,KACItB,EAAA,cAACuB,EAAA,EAAD,CAAKC,GAAI,EAAGC,SAAU,GAClBzB,EAAA,cAACD,EAAD,MACAC,EAAA,cAACsD,EAAA,EAAD,CAAaC,WAAS,GAClBvD,EAAA,cAACwD,EAAA,cAAD,CAAeC,GAAG,gBACdzD,EAAA,cAACyC,EAAA,EAAD,CAAQiB,QAAQ,WAAhB,2BAIJ1D,EAAA,cAACwD,EAAA,cAAD,CAAeC,GAAG,iBACdzD,EAAA,cAACyC,EAAA,EAAD,CAAQiB,QAAQ,WAAhB,yBCOTC,mLAbP,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACHH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,KAAK,eAAeC,UAAWC,IACtCR,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,KAAK,gBAAgBC,UAAWtB,IACvCe,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWd,cAP7BgB,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECVNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.65dfb68e.chunk.js","sourcesContent":["import {PageHeader} from \"react-bootstrap\";\r\nimport * as React from \"react\";\r\n\r\nexport default () => <PageHeader>Volleyball Tournament App</PageHeader>","import * as React from \"react\";\r\nimport {Button, Col, ControlLabel, FormControl, FormGroup, Grid, Row} from \"react-bootstrap\";\r\nimport Logo from \"./Logo\";\r\n\r\nclass NewToruney extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n        this.state = {\r\n            value: ''\r\n        };\r\n    }\r\n\r\n    getValidationState() {\r\n        const length = this.state.value.length;\r\n        if (length > 0) return 'success';\r\n        return null;\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({value: e.target.value});\r\n    }\r\n\r\n    render() {\r\n        return <Grid>\r\n            <Row>\r\n                <Col sm={8} smOffset={2}>\r\n                    <Logo/>\r\n                    <form\r\n                        style={formStyle}\r\n                        onSubmit={e => {\r\n                            alert('Nie-dupa');\r\n                            e.preventDefault()\r\n                        }}>\r\n                        <h2>Stwórz nowy turniej</h2>\r\n                        <FormGroup\r\n                            controlId='formBasicText'\r\n                            validationState={this.getValidationState()}\r\n                        >\r\n                            <ControlLabel>Podaj nazwę turnieju</ControlLabel>\r\n                            <FormControl\r\n                                type=\"text\"\r\n                                value={this.state.value}\r\n                                placeholder=\"Małopolski turniej siatkówki amatorskiej \"\r\n                                onChange={this.handleChange}\r\n                            />\r\n                            <FormControl.Feedback/>\r\n                        </FormGroup>\r\n                        <Button type=\"submit\">Stwórz</Button>\r\n                    </form>\r\n                </Col>\r\n            </Row>\r\n        </Grid>\r\n    }\r\n}\r\n\r\nconst formStyle = {\r\n    border: 'thin black solid',\r\n    padding: '20px'\r\n};\r\n\r\nexport default NewToruney;","import * as React from \"react\";\r\nimport {ControlLabel, FormControl, FormGroup, HelpBlock} from \"react-bootstrap\";\r\nimport Grid from \"react-bootstrap/es/Grid\";\r\nimport Row from \"react-bootstrap/es/Row\";\r\nimport Col from \"react-bootstrap/es/Col\";\r\nimport Logo from \"./Logo\";\r\n\r\nclass LoadTurney extends React.Component {\r\n\r\n    render() {\r\n        return <Grid>\r\n            <Row>\r\n                <Col sm={8} smOffset={2}>\r\n                    <Logo/>\r\n                    <form style={formStyle}>\r\n                        <h2>Wczytaj istniejący turniej</h2>\r\n                        <FormGroup controlId=\"formBasicText\">\r\n                            <FieldGroup\r\n                                id=\"formControlsFile\"\r\n                                type=\"file\"\r\n                                label=\"Wybierz plik z zapisanym turniejem\"\r\n                            />\r\n\r\n                        </FormGroup>\r\n                    </form>\r\n                </Col>\r\n            </Row>\r\n        </Grid>\r\n    }\r\n}\r\n\r\nconst formStyle = {\r\n    border: 'thin black solid',\r\n    padding: '20px'\r\n};\r\n\r\n\r\nfunction FieldGroup({id, label, help, ...props}) {\r\n    return (\r\n        <FormGroup controlId={id}>\r\n            <ControlLabel>{label}</ControlLabel>\r\n            <FormControl {...props} />\r\n            {help && <HelpBlock>{help}</HelpBlock>}\r\n        </FormGroup>\r\n    );\r\n}\r\n\r\nexport default LoadTurney;","import {Button, ButtonGroup, Col, Grid, Row} from \"react-bootstrap\";\r\nimport * as React from \"react\";\r\nimport {LinkContainer} from \"react-router-bootstrap\";\r\nimport Logo from \"./Logo\";\r\n\r\n\r\nexport default () =>\r\n    <Grid>\r\n        <Row>\r\n            <Col sm={8} smOffset={2}>\r\n                <Logo/>\r\n                <ButtonGroup justified>\r\n                    <LinkContainer to='/tourney/new'>\r\n                        <Button bsStyle=\"primary\">\r\n                            Swtórz nowy turniej\r\n                        </Button>\r\n                    </LinkContainer>\r\n                    <LinkContainer to='/tourney/load'>\r\n                        <Button bsStyle=\"primary\">\r\n                            Wczytaj turniej\r\n                        </Button>\r\n                    </LinkContainer>\r\n                </ButtonGroup>\r\n            </Col>\r\n        </Row>\r\n    </Grid>","import React, {Component} from 'react';\n\nimport './App.css'\n\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\n\nimport NewTourney from './components/NewTourney'\nimport LoadTurney from \"./components/LoadTourney\";\nimport SelectionPage from \"./components/SelectionPage\";\n\nclass App extends Component {\n    render() {\n        return <BrowserRouter>\n            <div>\n                <Switch>\n                    <Route path='/tourney/new' component={NewTourney}/>\n                    <Route path='/tourney/load' component={LoadTurney}/>\n                    <Route path='/' component={SelectionPage}/>\n                </Switch>\n            </div>\n        </BrowserRouter>\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap3/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}